{"ast":null,"code":"import authAPI from \"../api/api.js\";\nconst SET_AUTH_USER = \"SET_AUTH_USER\";\nconst RESET_USER_AUTH_DATA = \"RESET_USER_AUTH_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\";\nconst SET_ACCESS_TOKEN = \"SET_ACCESS_TOKEN\";\nconst SET_REFRESH_TOKEN = \"SET_REFRESH_TOKEN\";\nlet initialState = {\n  username: null,\n  loglast_name: null,\n  last_name: null,\n  email: null,\n  isAuth: false,\n  accessToken: \"\",\n  refreshToken: \"\"\n};\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ACCESS_TOKEN:\n      return {\n        ...state,\n        accessToken: action.accessToken\n      };\n    case SET_REFRESH_TOKEN:\n      return {\n        ...state,\n        refreshToken: action.refreshToken\n      };\n    case SET_AUTH_USER:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case RESET_USER_AUTH_DATA:\n      return {\n        // ...state,\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n_c = AuthReducer;\nexport default AuthReducer;\nexport const authUser = () => {\n  return async (dispatch, getState) => {\n    const {\n      refreshToken\n    } = getState().AuthReducer;\n    const response = await authAPI.authMe(refreshToken);\n    if (response.status === 200) {\n      dispatch(setAccessToken(response.data.access));\n      dispatch(setRefreshToken(response.data.refresh));\n    }\n  };\n};\nexport const getAauthUser = () => {\n  return async (dispatch, getState) => {\n    try {\n      // console.log('Trying to authenticate...');\n      const response = await authAPI.getAythUser();\n      if (response.status === 200) {\n        let {\n          username,\n          first_name,\n          last_name,\n          email\n        } = response.data.data;\n        console.log(username, first_name, last_name, email);\n        console.log(response.data.data);\n        dispatch(setAuthUser(username, first_name, last_name, email, true));\n      }\n    } catch (error) {\n      // Если запрос к authMe завершился ошибкой, попробовать обновить токен\n      if (error.response && error.response.status === 403 && error.response.data.detail === \"Given token not valid for any token type\") {\n        try {\n          const {\n            refreshToken\n          } = getState().AuthReducer; // Получаем refresh token из localStorage\n\n          if (refreshToken) {\n            const response = await authAPI.refreshToken(refreshToken);\n            localStorage.setAccessToken(response.data.access);\n            localStorage.setRefreshToken(response.data.refresh);\n            const newResponse = await authAPI.authMe();\n            if (newResponse.data.resultCode === 0) {\n              let {\n                id,\n                login,\n                email\n              } = newResponse.data.data;\n              dispatch(setAuthUser(id, login, email, true));\n            }\n          }\n        } catch (refreshError) {\n          // Здесь вы можете выполнить какие-то дополнительные действия при неудачной попытке обновления токена\n          dispatch(resetAuthDataAC());\n          setAccessToken(\"\");\n          setRefreshToken(\"\");\n        }\n      }\n    }\n  };\n};\nexport const register = (fullName, login, email, password, repidPassword, setStatus) => {\n  return async dispatch => {\n    const response = await authAPI.registerUser(fullName, login, email, password, repidPassword);\n    if (response.data.resultCode === 0) {\n      localStorage.setItem('userToken', response.data.data.token);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      // dispatch(getAauthUser());\n    } else {\n      setStatus(response.data.email[0]);\n    }\n  };\n};\nexport const login = (username, password, setStatus) => {\n  return async dispatch => {\n    const response = await authAPI.loginUser(username, password);\n    console.log('Что то тут', response.data.detail);\n    if (response.status === 200) {\n      dispatch(setAccessToken(response.data.access));\n      dispatch(setRefreshToken(response.data.refresh));\n      dispatch(getAauthUser());\n    } else if (response.status === 401) {\n      console.log(response);\n      setStatus(response.detail);\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    try {\n      const response = await authAPI.logout();\n      if (response.data.resultCode === 0) {\n        dispatch(resetAuthDataAC());\n        setAccessToken(\"\");\n        setRefreshToken(\"\");\n      }\n    } catch (error) {\n      // Обработка ошибок при выходе\n      console.error('Logout error:', error);\n    }\n  };\n};\n\n//Вывод стрелочной ф-и без return возможен, если функция только возвращает обьекты, после => нужно обернуть в ()\nexport const setAuthUser = (username, first_name, last_name, email, isAuth) => ({\n  type: SET_AUTH_USER,\n  payload: {\n    username,\n    first_name,\n    last_name,\n    email,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const resetAuthDataAC = () => {\n  return {\n    type: RESET_USER_AUTH_DATA\n  };\n};\nexport const setAccessToken = accessToken => ({\n  type: SET_ACCESS_TOKEN,\n  accessToken\n});\nexport const setRefreshToken = refreshToken => ({\n  type: SET_REFRESH_TOKEN,\n  refreshToken\n});\nvar _c;\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"names":["authAPI","SET_AUTH_USER","RESET_USER_AUTH_DATA","GET_CAPTCHA_URL_SUCCESS","SET_ACCESS_TOKEN","SET_REFRESH_TOKEN","initialState","username","loglast_name","last_name","email","isAuth","accessToken","refreshToken","AuthReducer","state","action","type","payload","_c","authUser","dispatch","getState","response","authMe","status","setAccessToken","data","access","setRefreshToken","refresh","getAauthUser","getAythUser","first_name","console","log","setAuthUser","error","detail","localStorage","newResponse","resultCode","id","login","refreshError","resetAuthDataAC","register","fullName","password","repidPassword","setStatus","registerUser","setItem","token","loginUser","logout","getCaptchaUrlSuccess","captchaUrl","$RefreshReg$"],"sources":["/home/dima_protasevich/Documents/PycharmProjects/student_app_test/frontend/src/reduser/auth-reduser.js"],"sourcesContent":["import authAPI from \"../api/api.js\";\n\nconst SET_AUTH_USER = \"SET_AUTH_USER\"\nconst RESET_USER_AUTH_DATA = \"RESET_USER_AUTH_DATA\"\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\"\nconst SET_ACCESS_TOKEN = \"SET_ACCESS_TOKEN\";\nconst SET_REFRESH_TOKEN = \"SET_REFRESH_TOKEN\";\n\n\nlet initialState = {\n  username: null,\n  loglast_name: null,\n  last_name: null,\n  email: null,\n  isAuth: false,\n  accessToken: \"\",\n  refreshToken: \"\",\n};\n\nconst AuthReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_ACCESS_TOKEN:\n            return {\n                ...state,\n                accessToken: action.accessToken\n            }\n        \n        case SET_REFRESH_TOKEN:\n            return {\n              ...state,\n              refreshToken: action.refreshToken\n            };\n\n        case SET_AUTH_USER:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state, \n                ...action.payload\n                }\n\n        case RESET_USER_AUTH_DATA:\n            return {\n                // ...state,\n                ...initialState\n            }\n        \n        default:\n            return state\n    }\n}\n\nexport default AuthReducer\n\n\nexport const authUser = () => {\n    return async (dispatch, getState) => {\n        const { refreshToken } = getState().AuthReducer;\n        const response = await authAPI.authMe(refreshToken);\n        if (response.status === 200) {\n            dispatch(setAccessToken(response.data.access));\n            dispatch(setRefreshToken(response.data.refresh));\n        }\n    };\n};\n\n\nexport const getAauthUser = () => {\n    return async (dispatch, getState) => {\n      try {\n        // console.log('Trying to authenticate...');\n        const response = await authAPI.getAythUser();\n        if (response.status === 200) {\n          let { username, first_name, last_name, email } = response.data.data;\n          console.log(username, first_name, last_name, email);\n          console.log(response.data.data);\n          dispatch(setAuthUser(username, first_name, last_name, email, true));\n        }\n      } catch (error) {\n        // Если запрос к authMe завершился ошибкой, попробовать обновить токен\n        if (\n          error.response &&\n          error.response.status === 403 &&\n          error.response.data.detail ===\n            \"Given token not valid for any token type\"\n        ) {\n          try {\n            const { refreshToken } = getState().AuthReducer; // Получаем refresh token из localStorage\n\n            if (refreshToken) {\n              const response = await authAPI.refreshToken(refreshToken);\n\n              localStorage.setAccessToken(response.data.access);\n              localStorage.setRefreshToken(response.data.refresh);\n\n              const newResponse = await authAPI.authMe();\n              if (newResponse.data.resultCode === 0) {\n                let { id, login, email } = newResponse.data.data;\n                dispatch(setAuthUser(id, login, email, true));\n              }\n            }\n          } catch (refreshError) {\n            // Здесь вы можете выполнить какие-то дополнительные действия при неудачной попытке обновления токена\n            dispatch(resetAuthDataAC());\n            setAccessToken(\"\");\n            setRefreshToken(\"\");\n          }\n        }\n      }\n    };\n};\n\n\nexport const register = (fullName, login, email, password, repidPassword, setStatus) => {\n    return async (dispatch) => {\n        const response = await authAPI.registerUser(fullName, login, email, password, repidPassword)\n        if (response.data.resultCode === 0) {\n            localStorage.setItem('userToken', response.data.data.token);\n            localStorage.setItem('refreshToken', response.data.data.refreshToken);\n            // dispatch(getAauthUser());\n        } else {\n            setStatus(response.data.email[0]);\n        }\n    }\n}\n\n\nexport const login = (username, password, setStatus) => {\n  return async (dispatch) => {\n    const response = await authAPI.loginUser(username, password);\n    console.log('Что то тут', response.data.detail)\n    if (response.status === 200) {\n\n        dispatch(setAccessToken(response.data.access));\n        dispatch(setRefreshToken(response.data.refresh));\n        dispatch(getAauthUser());\n    } else if (response.status === 401) {\n        console.log(response)\n        setStatus(response.detail);\n    }\n  };\n};\n\nexport const logout = () => {\n    return async (dispatch) => {\n        try {\n            const response = await authAPI.logout();\n            if (response.data.resultCode === 0) {\n                dispatch(resetAuthDataAC());\n                setAccessToken(\"\");\n                setRefreshToken(\"\");\n            }\n        } catch (error) {\n            // Обработка ошибок при выходе\n            console.error('Logout error:', error);\n        }\n    };\n};\n\n\n\n//Вывод стрелочной ф-и без return возможен, если функция только возвращает обьекты, после => нужно обернуть в ()\nexport const setAuthUser = (username, first_name, last_name, email, isAuth) => ({ type: SET_AUTH_USER, payload: {username, first_name, last_name, email, isAuth} })\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl} })\nexport const resetAuthDataAC = () => {return { type: RESET_USER_AUTH_DATA }}\nexport const setAccessToken = (accessToken) => ({type: SET_ACCESS_TOKEN, accessToken})\nexport const setRefreshToken = (refreshToken) => ({type: SET_REFRESH_TOKEN, refreshToken})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}