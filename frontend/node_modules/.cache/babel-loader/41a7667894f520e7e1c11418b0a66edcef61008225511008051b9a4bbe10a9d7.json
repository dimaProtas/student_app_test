{"ast":null,"code":"import axios from \"axios\";\nexport const instans = axios.create({\n  withCredentials: true,\n  // baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  // headers: {'API-KEY': '326b0522-c61e-4d4e-a7df-aae77c6de2db'}\n  baseURL: 'http://127.0.0.1:8000/api/'\n});\n\n// Добавляем interceptor для автоматического добавления токена в заголовок запроса\ninstans.interceptors.request.use(config => {\n  const token = localStorage.getItem('userToken'); // Получаем токен из localStorage\n  // const refreshToken = localStorage.getItem('refreshToken'); // Получаем токен из localStorage\n  // console.log('Access token retrieved from localStorage:', `Bearer ${token}`);\n  // console.log('refreshToken', `Bearer ${refreshToken}`);\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst authAPI = {\n  authMe() {\n    return instans.get(`user/`);\n  },\n  registerUser(fullName, login, email, password, repidPassword) {\n    let result = instans.post(`register/`, {\n      full_name: fullName,\n      username: login,\n      email,\n      password,\n      repidPassword\n    });\n    return result;\n  },\n  loginUser(email, password) {\n    // console.log(email, password)\n    let result = instans.post(\"auth/login/\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return result;\n  },\n  logout() {\n    return instans.delete(\"auth/logout/\");\n  },\n  refreshToken(refreshToken) {\n    let result = instans.post(\"token/refresh/\", {\n      refresh: refreshToken\n    });\n    return result;\n  }\n};\nexport const securityAPI = {\n  getCaptchaUrl() {\n    return instans.post('security/get-captcha-url');\n  }\n};\nexport default authAPI;","map":{"version":3,"names":["axios","instans","create","withCredentials","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","authAPI","authMe","get","registerUser","fullName","login","email","password","repidPassword","result","post","full_name","username","loginUser","logout","delete","refreshToken","refresh","securityAPI","getCaptchaUrl"],"sources":["/home/dima_protasevich/Documents/PycharmProjects/student_app_test/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const instans = axios.create({\n    withCredentials: true,\n    // baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    // headers: {'API-KEY': '326b0522-c61e-4d4e-a7df-aae77c6de2db'}\n    baseURL: 'http://127.0.0.1:8000/api/'\n})\n\n\n// Добавляем interceptor для автоматического добавления токена в заголовок запроса\ninstans.interceptors.request.use(config => {\n    const token = localStorage.getItem('userToken'); // Получаем токен из localStorage\n    // const refreshToken = localStorage.getItem('refreshToken'); // Получаем токен из localStorage\n    // console.log('Access token retrieved from localStorage:', `Bearer ${token}`);\n    // console.log('refreshToken', `Bearer ${refreshToken}`);\n    if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\n\nconst authAPI = {\n  authMe() {\n    return instans.get(`user/`);\n  },\n\n  registerUser(fullName, login, email, password, repidPassword) {\n    let result = instans.post(`register/`, {\n      full_name: fullName,\n      username: login,\n      email,\n      password,\n      repidPassword,\n    });\n    return result;\n  },\n\n  loginUser(email, password) {\n    // console.log(email, password)\n    let result = instans.post(\n      \"auth/login/\",\n      { email, password },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n    return result;\n  },\n\n  logout() {\n    return instans.delete(\"auth/logout/\");\n  },\n\n  refreshToken(refreshToken) {\n    let result = instans.post(\"token/refresh/\", { refresh: refreshToken });\n    return result;\n  },\n}; \n\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instans.post('security/get-captcha-url');\n    }\n} \n\n\n\n\nexport default authAPI\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAChCC,eAAe,EAAE,IAAI;EACrB;EACA;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;;AAGF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD;EACA;EACA;EACA,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EACvD;EAEA,OAAOD,MAAM;AACjB,CAAC,EAAEK,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAGF,MAAMG,OAAO,GAAG;EACdC,MAAMA,CAAA,EAAG;IACP,OAAOhB,OAAO,CAACiB,GAAG,CAAE,OAAM,CAAC;EAC7B,CAAC;EAEDC,YAAYA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,EAAE;IAC5D,IAAIC,MAAM,GAAGxB,OAAO,CAACyB,IAAI,CAAE,WAAU,EAAE;MACrCC,SAAS,EAAEP,QAAQ;MACnBQ,QAAQ,EAAEP,KAAK;MACfC,KAAK;MACLC,QAAQ;MACRC;IACF,CAAC,CAAC;IACF,OAAOC,MAAM;EACf,CAAC;EAEDI,SAASA,CAACP,KAAK,EAAEC,QAAQ,EAAE;IACzB;IACA,IAAIE,MAAM,GAAGxB,OAAO,CAACyB,IAAI,CACvB,aAAa,EACb;MAAEJ,KAAK;MAAEC;IAAS,CAAC,EACnB;MAAEX,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CACpD,CAAC;IACD,OAAOa,MAAM;EACf,CAAC;EAEDK,MAAMA,CAAA,EAAG;IACP,OAAO7B,OAAO,CAAC8B,MAAM,CAAC,cAAc,CAAC;EACvC,CAAC;EAEDC,YAAYA,CAACA,YAAY,EAAE;IACzB,IAAIP,MAAM,GAAGxB,OAAO,CAACyB,IAAI,CAAC,gBAAgB,EAAE;MAAEO,OAAO,EAAED;IAAa,CAAC,CAAC;IACtE,OAAOP,MAAM;EACf;AACF,CAAC;AAGD,OAAO,MAAMS,WAAW,GAAG;EACvBC,aAAaA,CAAA,EAAG;IACZ,OAAOlC,OAAO,CAACyB,IAAI,CAAC,0BAA0B,CAAC;EACnD;AACJ,CAAC;AAKD,eAAeV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}