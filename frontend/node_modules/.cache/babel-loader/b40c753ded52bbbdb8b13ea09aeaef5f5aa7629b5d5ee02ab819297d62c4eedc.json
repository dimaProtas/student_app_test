{"ast":null,"code":"import authAPI, { securityAPI } from \"../api/api.js\";\nconst SET_AUTH_USER = \"SET_AUTH_USER\";\nconst RESET_USER_AUTH_DATA = \"RESET_USER_AUTH_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\";\nconst SET_ACCESS_TOKEN = \"SET_ACCESS_TOKEN\";\nconst SET_REFRESH_TOKEN = \"SET_REFRESH_TOKEN\";\nlet initialState = {\n  userId: null,\n  login: null,\n  email: null,\n  isAuth: false,\n  accessToken: \"\",\n  refreshToken: \"\"\n};\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ACCESS_TOKEN:\n      return {\n        ...state,\n        accessToken: action.accessToken\n      };\n    case SET_REFRESH_TOKEN:\n      return {\n        ...state,\n        refreshToken: action.refreshToken\n      };\n    case SET_AUTH_USER:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case RESET_USER_AUTH_DATA:\n      return {\n        // ...state,\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n_c = AuthReducer;\nexport default AuthReducer;\nexport const authUser = () => {\n  return async dispatch => {\n    try {\n      // console.log('Trying to authenticate...');\n      const response = await authAPI.authMe();\n      console.log(response);\n      if (response.data) {\n        let {\n          username,\n          login,\n          email\n        } = response.data.data;\n        dispatch(setAuthUser(id, login, email, true));\n      }\n    } catch (error) {\n      // Если запрос к authMe завершился ошибкой, попробовать обновить токен\n      if (error.response && error.response.status === 403 && error.response.data.detail === \"Given token not valid for any token type\") {\n        try {\n          // console.log('Refreshing token...');\n          const refreshToken = localStorage.getItem('refreshToken'); // Получаем refresh token из localStorage\n\n          if (refreshToken) {\n            const response = await authAPI.refreshToken(refreshToken);\n            // console.log('New access token:', response.data.access);\n            localStorage.setAccessToken(response.data.access);\n            localStorage.setRefreshToken(response.data.refresh);\n\n            // Повторить запрос к authMe с новым access token\n            // console.log('Retrying authMe...');\n            const newResponse = await authAPI.authMe();\n            if (newResponse.data.resultCode === 0) {\n              let {\n                id,\n                login,\n                email\n              } = newResponse.data.data;\n              dispatch(setAuthUser(id, login, email, true));\n            }\n          }\n        } catch (refreshError) {\n          // console.error('Error refreshing token:', refreshError);\n          // Здесь вы можете выполнить какие-то дополнительные действия при неудачной попытке обновления токена\n          dispatch(resetAuthDataAC());\n          localStorage.setItem('userToken', '');\n          localStorage.setItem('refreshToken', '');\n        }\n      }\n    }\n  };\n};\nexport const register = (fullName, login, email, password, repidPassword, setStatus) => {\n  return async dispatch => {\n    const response = await authAPI.registerUser(fullName, login, email, password, repidPassword);\n    if (response.data.resultCode === 0) {\n      localStorage.setItem('userToken', response.data.data.token);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      // dispatch(authUser());\n    } else {\n      setStatus(response.data.email[0]);\n    }\n  };\n};\nexport const login = (username, password, setStatus) => {\n  return async dispatch => {\n    const response = await authAPI.loginUser(username, password);\n    console.log(response);\n    if (response.status === 200) {\n      dispatch(setAccessToken(response.data.access));\n      dispatch(setRefreshToken(response.data.refresh));\n      dispatch(authUser());\n    } else if (response.status === 401) {\n      console.log(response);\n      setStatus(response.detail);\n    }\n  };\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => {\n  return async dispatch => {\n    try {\n      const response = await authAPI.logout();\n      if (response.data.resultCode === 0) {\n        dispatch(resetAuthDataAC());\n        localStorage.setItem('userToken', '');\n        localStorage.setItem('refreshToken', '');\n      }\n    } catch (error) {\n      // Обработка ошибок при выходе\n      console.error('Logout error:', error);\n    }\n  };\n};\n\n//Вывод стрелочной ф-и без return возможен, если функция только возвращает обьекты, после => нужно обернуть в ()\nexport const setAuthUser = (userId, login, email, isAuth) => ({\n  type: SET_AUTH_USER,\n  payload: {\n    userId,\n    login,\n    email,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const resetAuthDataAC = () => {\n  return {\n    type: RESET_USER_AUTH_DATA\n  };\n};\nexport const setAccessToken = accessToken => ({\n  type: SET_ACCESS_TOKEN,\n  accessToken\n});\nexport const setRefreshToken = refreshToken => ({\n  type: SET_REFRESH_TOKEN,\n  refreshToken\n});\nvar _c;\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"names":["authAPI","securityAPI","SET_AUTH_USER","RESET_USER_AUTH_DATA","GET_CAPTCHA_URL_SUCCESS","SET_ACCESS_TOKEN","SET_REFRESH_TOKEN","initialState","userId","login","email","isAuth","accessToken","refreshToken","AuthReducer","state","action","type","payload","_c","authUser","dispatch","response","authMe","console","log","data","username","setAuthUser","id","error","status","detail","localStorage","getItem","setAccessToken","access","setRefreshToken","refresh","newResponse","resultCode","refreshError","resetAuthDataAC","setItem","register","fullName","password","repidPassword","setStatus","registerUser","token","loginUser","getCaptchaUrl","captchaUrl","url","getCaptchaUrlSuccess","logout","$RefreshReg$"],"sources":["/home/dima_protasevich/Documents/PycharmProjects/student_app_test/frontend/src/reduser/auth-reduser.js"],"sourcesContent":["import authAPI, { securityAPI } from \"../api/api.js\";\n\nconst SET_AUTH_USER = \"SET_AUTH_USER\"\nconst RESET_USER_AUTH_DATA = \"RESET_USER_AUTH_DATA\"\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\"\nconst SET_ACCESS_TOKEN = \"SET_ACCESS_TOKEN\";\nconst SET_REFRESH_TOKEN = \"SET_REFRESH_TOKEN\";\n\n\nlet initialState = {\n  userId: null,\n  login: null,\n  email: null,\n  isAuth: false,\n  accessToken: \"\",\n  refreshToken: \"\",\n};\n\nconst AuthReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_ACCESS_TOKEN:\n            return {\n                ...state,\n                accessToken: action.accessToken\n            }\n        \n        case SET_REFRESH_TOKEN:\n            return {\n              ...state,\n              refreshToken: action.refreshToken\n            };\n\n        case SET_AUTH_USER:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state, \n                ...action.payload\n                }\n\n        case RESET_USER_AUTH_DATA:\n            return {\n                // ...state,\n                ...initialState\n            }\n        \n        default:\n            return state\n    }\n}\n\nexport default AuthReducer\n\n\nexport const authUser = () => {\n    return async (dispatch) => {\n        try {\n            // console.log('Trying to authenticate...');\n            const response = await authAPI.authMe();\n            console.log(response)\n            if (response.data) {\n                let { username, login, email } = response.data.data;\n                dispatch(setAuthUser(id, login, email, true));\n            }\n        } catch (error) {\n\n            // Если запрос к authMe завершился ошибкой, попробовать обновить токен\n            if (error.response && error.response.status === 403 && error.response.data.detail === \"Given token not valid for any token type\") {\n                try {\n                    // console.log('Refreshing token...');\n                    const refreshToken = localStorage.getItem('refreshToken'); // Получаем refresh token из localStorage\n\n                    if (refreshToken) {\n                        const response = await authAPI.refreshToken(refreshToken);\n                        // console.log('New access token:', response.data.access);\n                        localStorage.setAccessToken(response.data.access);\n                        localStorage.setRefreshToken(response.data.refresh);\n\n                        // Повторить запрос к authMe с новым access token\n                        // console.log('Retrying authMe...');\n                        const newResponse = await authAPI.authMe();\n                        if (newResponse.data.resultCode === 0) {\n                            let { id, login, email } = newResponse.data.data;\n                            dispatch(setAuthUser(id, login, email, true));\n                        }\n                    }\n                } catch (refreshError) {\n                    // console.error('Error refreshing token:', refreshError);\n                    // Здесь вы можете выполнить какие-то дополнительные действия при неудачной попытке обновления токена\n                    dispatch(resetAuthDataAC());\n                    localStorage.setItem('userToken', '');\n                    localStorage.setItem('refreshToken', '');\n                }\n            }\n        }\n    };\n};\n\n\nexport const register = (fullName, login, email, password, repidPassword, setStatus) => {\n    return async (dispatch) => {\n        const response = await authAPI.registerUser(fullName, login, email, password, repidPassword)\n        if (response.data.resultCode === 0) {\n            localStorage.setItem('userToken', response.data.data.token);\n            localStorage.setItem('refreshToken', response.data.data.refreshToken);\n            // dispatch(authUser());\n        } else {\n            setStatus(response.data.email[0]);\n        }\n    }\n}\n\n\nexport const login = (username, password, setStatus) => {\n  return async (dispatch) => {\n    const response = await authAPI.loginUser(username, password);\n    console.log(response)\n    if (response.status === 200) {\n\n      dispatch(setAccessToken(response.data.access));\n      dispatch(setRefreshToken(response.data.refresh));\n      dispatch(authUser());\n    } else if (response.status === 401) {\n        console.log(response)\n      setStatus(response.detail);\n    }\n  };\n};\n\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n        const response = await securityAPI.getCaptchaUrl()\n        const captchaUrl = response.data.url\n        dispatch(getCaptchaUrlSuccess(captchaUrl))\n    }\n\nexport const logout = () => {\n    return async (dispatch) => {\n        try {\n            const response = await authAPI.logout();\n            if (response.data.resultCode === 0) {\n                dispatch(resetAuthDataAC());\n                localStorage.setItem('userToken', '');\n                localStorage.setItem('refreshToken', '');\n            }\n        } catch (error) {\n            // Обработка ошибок при выходе\n            console.error('Logout error:', error);\n        }\n    };\n};\n\n\n\n//Вывод стрелочной ф-и без return возможен, если функция только возвращает обьекты, после => нужно обернуть в ()\nexport const setAuthUser = (userId, login, email, isAuth) => ({ type: SET_AUTH_USER, payload: {userId, login, email, isAuth} })\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl} })\nexport const resetAuthDataAC = () => {return { type: RESET_USER_AUTH_DATA }}\nexport const setAccessToken = (accessToken) => ({type: SET_ACCESS_TOKEN, accessToken})\nexport const setRefreshToken = (refreshToken) => ({type: SET_REFRESH_TOKEN, refreshToken})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}