{"ast":null,"code":"import authAPI, { securityAPI } from \"../api/api.js\";\nconst SET_AUTH_USER = \"SET_AUTH_USER\";\nconst RESET_USER_AUTH_DATA = \"RESET_USER_AUTH_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\";\nconst SET_ACCESS_TOKEN = \"SET_ACCESS_TOKEN\";\nconst SET_REFRESH_TOKEN = \"SET_REFRESH_TOKEN\";\nlet initialState = {\n  userId: null,\n  login: null,\n  email: null,\n  isAuth: false,\n  accessToken: \"\",\n  refreshToken: \"\"\n};\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ACCESS_TOKEN:\n      return {\n        ...state,\n        accessToken: action.accessToken\n      };\n    case SET_REFRESH_TOKEN:\n      return {\n        ...state,\n        refreshToken: action.refreshToken\n      };\n    case SET_AUTH_USER:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case RESET_USER_AUTH_DATA:\n      return {\n        // ...state,\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n_c = AuthReducer;\nexport default AuthReducer;\n\n// export const authUser = () => {\n//     return async (dispatch) => {\n//         try {\n//             // console.log('Trying to authenticate...');\n//             const response = await authAPI.authMe();\n\n//             if (response.data.resultCode === 0) {\n//                 let { id, login, email } = response.data.data;\n//                 dispatch(setAuthUser(id, login, email, true));\n//             }\n//         } catch (error) {\n\n//             // Если запрос к authMe завершился ошибкой, попробовать обновить токен\n//             if (error.response && error.response.status === 403 && error.response.data.detail === \"Given token not valid for any token type\") {\n//                 try {\n//                     // console.log('Refreshing token...');\n//                     const refreshToken = localStorage.getItem('refreshToken'); // Получаем refresh token из localStorage\n\n//                     if (refreshToken) {\n//                         const response = await authAPI.refreshToken(refreshToken);\n//                         // console.log('New access token:', response.data.access);\n//                         localStorage.setAccessToken(response.data.access);\n//                         localStorage.setRefreshToken(response.data.refresh);\n\n//                         // Повторить запрос к authMe с новым access token\n//                         // console.log('Retrying authMe...');\n//                         const newResponse = await authAPI.authMe();\n//                         if (newResponse.data.resultCode === 0) {\n//                             let { id, login, email } = newResponse.data.data;\n//                             dispatch(setAuthUser(id, login, email, true));\n//                         }\n//                     }\n//                 } catch (refreshError) {\n//                     // console.error('Error refreshing token:', refreshError);\n//                     // Здесь вы можете выполнить какие-то дополнительные действия при неудачной попытке обновления токена\n//                     dispatch(resetAuthDataAC());\n//                     localStorage.setItem('userToken', '');\n//                     localStorage.setItem('refreshToken', '');\n//                 }\n//             }\n//         }\n//     };\n// };\n\nexport const register = (fullName, login, email, password, repidPassword, setStatus) => {\n  return async dispatch => {\n    const response = await authAPI.registerUser(fullName, login, email, password, repidPassword);\n    if (response.data.resultCode === 0) {\n      localStorage.setItem('userToken', response.data.data.token);\n      localStorage.setItem('refreshToken', response.data.data.refreshToken);\n      // dispatch(authUser());\n    } else {\n      setStatus(response.data.email[0]);\n    }\n  };\n};\nexport const login = (username, password, setStatus) => {\n  return async dispatch => {\n    const response = await authAPI.loginUser(username, password);\n    console.log(response);\n    if (response.data.status === 200) {\n      // Сохранение токена в localStorage\n      // console.log('refreshToken', response.data.data.refreshToken)\n      localStorage.setAccessToken(response.data.access);\n      localStorage.setRefreshToken(response.data.refreshToken);\n\n      //   dispatch(setAuthUser(userId, login, email, true));\n    } else if (response.data.status === 401) {\n      setStatus(response.data.detail);\n    }\n  };\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => {\n  return async dispatch => {\n    try {\n      const response = await authAPI.logout();\n      if (response.data.resultCode === 0) {\n        dispatch(resetAuthDataAC());\n        localStorage.setItem('userToken', '');\n        localStorage.setItem('refreshToken', '');\n      }\n    } catch (error) {\n      // Обработка ошибок при выходе\n      console.error('Logout error:', error);\n    }\n  };\n};\n\n//Вывод стрелочной ф-и без return возможен, если функция только возвращает обьекты, после => нужно обернуть в ()\nexport const setAuthUser = (userId, login, email, isAuth) => ({\n  type: SET_AUTH_USER,\n  payload: {\n    userId,\n    login,\n    email,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const resetAuthDataAC = () => {\n  return {\n    type: RESET_USER_AUTH_DATA\n  };\n};\nexport const setAccessToken = accessToken => ({\n  type: SET_ACCESS_TOKEN,\n  accessToken\n});\nexport const setRefreshToken = refreshToken => ({\n  type: SET_REFRESH_TOKEN,\n  refreshToken\n});\nvar _c;\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"names":["authAPI","securityAPI","SET_AUTH_USER","RESET_USER_AUTH_DATA","GET_CAPTCHA_URL_SUCCESS","SET_ACCESS_TOKEN","SET_REFRESH_TOKEN","initialState","userId","login","email","isAuth","accessToken","refreshToken","AuthReducer","state","action","type","payload","_c","register","fullName","password","repidPassword","setStatus","dispatch","response","registerUser","data","resultCode","localStorage","setItem","token","username","loginUser","console","log","status","setAccessToken","access","setRefreshToken","detail","getCaptchaUrl","captchaUrl","url","getCaptchaUrlSuccess","logout","resetAuthDataAC","error","setAuthUser","$RefreshReg$"],"sources":["/home/dima_protasevich/Documents/PycharmProjects/student_app_test/frontend/src/reduser/auth-reduser.js"],"sourcesContent":["import authAPI, { securityAPI } from \"../api/api.js\";\n\nconst SET_AUTH_USER = \"SET_AUTH_USER\"\nconst RESET_USER_AUTH_DATA = \"RESET_USER_AUTH_DATA\"\nconst GET_CAPTCHA_URL_SUCCESS = \"GET_CAPTCHA_URL_SUCCESS\"\nconst SET_ACCESS_TOKEN = \"SET_ACCESS_TOKEN\";\nconst SET_REFRESH_TOKEN = \"SET_REFRESH_TOKEN\";\n\n\nlet initialState = {\n  userId: null,\n  login: null,\n  email: null,\n  isAuth: false,\n  accessToken: \"\",\n  refreshToken: \"\",\n};\n\nconst AuthReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_ACCESS_TOKEN:\n            return {\n                ...state,\n                accessToken: action.accessToken\n            }\n        \n        case SET_REFRESH_TOKEN:\n            return {\n              ...state,\n              refreshToken: action.refreshToken\n            };\n\n        case SET_AUTH_USER:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state, \n                ...action.payload\n                }\n\n        case RESET_USER_AUTH_DATA:\n            return {\n                // ...state,\n                ...initialState\n            }\n        \n        default:\n            return state\n    }\n}\n\nexport default AuthReducer\n\n\n// export const authUser = () => {\n//     return async (dispatch) => {\n//         try {\n//             // console.log('Trying to authenticate...');\n//             const response = await authAPI.authMe();\n\n//             if (response.data.resultCode === 0) {\n//                 let { id, login, email } = response.data.data;\n//                 dispatch(setAuthUser(id, login, email, true));\n//             }\n//         } catch (error) {\n\n//             // Если запрос к authMe завершился ошибкой, попробовать обновить токен\n//             if (error.response && error.response.status === 403 && error.response.data.detail === \"Given token not valid for any token type\") {\n//                 try {\n//                     // console.log('Refreshing token...');\n//                     const refreshToken = localStorage.getItem('refreshToken'); // Получаем refresh token из localStorage\n\n//                     if (refreshToken) {\n//                         const response = await authAPI.refreshToken(refreshToken);\n//                         // console.log('New access token:', response.data.access);\n//                         localStorage.setAccessToken(response.data.access);\n//                         localStorage.setRefreshToken(response.data.refresh);\n\n//                         // Повторить запрос к authMe с новым access token\n//                         // console.log('Retrying authMe...');\n//                         const newResponse = await authAPI.authMe();\n//                         if (newResponse.data.resultCode === 0) {\n//                             let { id, login, email } = newResponse.data.data;\n//                             dispatch(setAuthUser(id, login, email, true));\n//                         }\n//                     }\n//                 } catch (refreshError) {\n//                     // console.error('Error refreshing token:', refreshError);\n//                     // Здесь вы можете выполнить какие-то дополнительные действия при неудачной попытке обновления токена\n//                     dispatch(resetAuthDataAC());\n//                     localStorage.setItem('userToken', '');\n//                     localStorage.setItem('refreshToken', '');\n//                 }\n//             }\n//         }\n//     };\n// };\n\n\nexport const register = (fullName, login, email, password, repidPassword, setStatus) => {\n    return async (dispatch) => {\n        const response = await authAPI.registerUser(fullName, login, email, password, repidPassword)\n        if (response.data.resultCode === 0) {\n            localStorage.setItem('userToken', response.data.data.token);\n            localStorage.setItem('refreshToken', response.data.data.refreshToken);\n            // dispatch(authUser());\n        } else {\n            setStatus(response.data.email[0]);\n        }\n    }\n}\n\n\nexport const login = (username, password, setStatus) => {\n  return async (dispatch) => {\n    const response = await authAPI.loginUser(username, password);\n    console.log(response)\n    if (response.data.status === 200) {\n      // Сохранение токена в localStorage\n      // console.log('refreshToken', response.data.data.refreshToken)\n      localStorage.setAccessToken(response.data.access);\n      localStorage.setRefreshToken(response.data.refreshToken);\n\n    //   dispatch(setAuthUser(userId, login, email, true));\n\n    } else if (response.data.status === 401) {\n      setStatus(response.data.detail);\n    }\n  };\n};\n\n\nexport const getCaptchaUrl = () => async (dispatch) => {\n        const response = await securityAPI.getCaptchaUrl()\n        const captchaUrl = response.data.url\n        dispatch(getCaptchaUrlSuccess(captchaUrl))\n    }\n\nexport const logout = () => {\n    return async (dispatch) => {\n        try {\n            const response = await authAPI.logout();\n            if (response.data.resultCode === 0) {\n                dispatch(resetAuthDataAC());\n                localStorage.setItem('userToken', '');\n                localStorage.setItem('refreshToken', '');\n            }\n        } catch (error) {\n            // Обработка ошибок при выходе\n            console.error('Logout error:', error);\n        }\n    };\n};\n\n\n\n//Вывод стрелочной ф-и без return возможен, если функция только возвращает обьекты, после => нужно обернуть в ()\nexport const setAuthUser = (userId, login, email, isAuth) => ({ type: SET_AUTH_USER, payload: {userId, login, email, isAuth} })\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl} })\nexport const resetAuthDataAC = () => {return { type: RESET_USER_AUTH_DATA }}\nexport const setAccessToken = (accessToken) => ({type: SET_ACCESS_TOKEN, accessToken})\nexport const setRefreshToken = (refreshToken) => ({type: SET_REFRESH_TOKEN, refreshToken})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}