{"ast":null,"code":"var _jsxFileName = \"/home/dima_protasevich/Documents/PycharmProjects/student_app_test/frontend/src/Component/LoginForm/LoginForm.jsx\";\nimport React from \"react\";\nimport style from './LoginForm.module.css';\nimport { connect } from 'react-redux';\n// import { login } from '../../reducer/auth-reduser.js';\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from 'yup';\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string().min(2, 'Too Short!').max(100, 'Too Long!').required('Required'),\n  password: Yup.string().min(2, 'Too Short!').max(100, 'Too Long!').required('Required')\n});\nexport const LoginForm = ({\n  login,\n  captchaUrl\n}) => {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n      captcha: null\n    },\n    onSubmit: async (values, {\n      setSubmitting,\n      setStatus\n    }) => {\n      // await new Promise((resolve) => setTimeout(resolve, 500));\n      // alert(JSON.stringify(values, null, 2));\n      // login(values.login, values.password, values.rememberMe, values.captcha, setStatus)\n      login(values.email, values.password, values.rememberMe, values.captcha, setStatus);\n      // console.log(values.login, values.password)\n      setSubmitting(false);\n    },\n    validationSchema: SignupSchema,\n    children: ({\n      errors,\n      touched,\n      status\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.myForm,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: errors.email && touched.email ? style.errors : null,\n          children: [errors.email && touched.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this) : null, /*#__PURE__*/_jsxDEV(Field, {\n            placeholder: 'Email',\n            name: 'email',\n            type: 'input'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: errors.password && touched.password ? style.errors : null,\n          children: [errors.password && touched.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 33\n          }, this) : null, /*#__PURE__*/_jsxDEV(Field, {\n            placeholder: 'Password',\n            name: 'password',\n            type: 'password'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.errorsServer,\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), captchaUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: captchaUrl,\n          alt: \"captcha\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 40\n        }, this), captchaUrl && /*#__PURE__*/_jsxDEV(Field, {\n          placeholder: 'num',\n          name: 'captcha',\n          type: 'input'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n// const LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\n_c = LoginForm;\nexport const Login = ({\n  login,\n  isAuth,\n  captchaUrl\n}) => {\n  if (isAuth === true) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: style.login,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n      login: login,\n      captchaUrl: captchaUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Login;\nconst mapStateToProps = state => ({\n  // captchaUrl: state.auth.captchaUrl,\n  // isAuth: state.auth.isAuth\n});\nexport default connect(mapStateToProps, {})(Login);\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginForm\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"names":["React","style","connect","Formik","Field","Form","Yup","Navigate","jsxDEV","_jsxDEV","SignupSchema","object","shape","email","string","min","max","required","password","LoginForm","login","captchaUrl","initialValues","rememberMe","captcha","onSubmit","values","setSubmitting","setStatus","validationSchema","children","errors","touched","status","className","myForm","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","name","type","errorsServer","src","alt","_c","Login","isAuth","to","_c2","mapStateToProps","state","$RefreshReg$"],"sources":["/home/dima_protasevich/Documents/PycharmProjects/student_app_test/frontend/src/Component/LoginForm/LoginForm.jsx"],"sourcesContent":["import React from \"react\";\nimport style from './LoginForm.module.css';\nimport { connect } from 'react-redux';\n// import { login } from '../../reducer/auth-reduser.js';\nimport { Formik, Field, Form } from \"formik\";\nimport * as Yup from 'yup';\nimport { Navigate } from \"react-router-dom\";\n\n\nconst SignupSchema = Yup.object().shape({\n    email: Yup.string()\n        .min(2, 'Too Short!')\n        .max(100, 'Too Long!')\n        .required('Required'),\n    password: Yup.string()\n        .min(2, 'Too Short!')\n        .max(100, 'Too Long!')\n        .required('Required'),\n});\n\n\nexport const LoginForm = ({login, captchaUrl}) => {\n    return (\n        <Formik\n            initialValues={{ email: \"\", password: \"\", rememberMe: false, captcha: null }}\n            onSubmit={async (values, { setSubmitting, setStatus }) => {\n                // await new Promise((resolve) => setTimeout(resolve, 500));\n                // alert(JSON.stringify(values, null, 2));\n                // login(values.login, values.password, values.rememberMe, values.captcha, setStatus)\n                login(values.email, values.password, values.rememberMe, values.captcha, setStatus)\n                // console.log(values.login, values.password)\n                setSubmitting(false);\n                \n            }}\n            validationSchema={SignupSchema}\n        >\n            {({ errors, touched, status }) => (\n                <div className={style.myForm}>\n                    <Form>\n                        <div className={errors.email && touched.email ? style.errors : null}>\n                            {errors.email && touched.email ? (\n                                <div>{errors.email}</div>\n                            ) : null}\n                            <Field placeholder={'Email'} name={'email'} type={'input'} />\n                        </div>\n                        <div className={errors.password && touched.password ? style.errors : null}>\n                            {errors.password && touched.password ? (\n                                <div>{errors.password}</div>\n                            ) : null}\n                            <Field placeholder={'Password'} name={'password'} type={'password'} />\n                        </div>\n                        <div className={style.errorsServer}>{status}</div>\n                        {/* <div>\n                            <Field type={'checkbox'} name={'rememberMe'} />remember me\n                        </div> */}\n                        {captchaUrl && <img src={captchaUrl} alt='captcha' />}\n                        {captchaUrl && <Field placeholder={'num'} name={'captcha'} type={'input'} />}\n                        <div>\n                            <button type=\"submit\">Login</button>\n                        </div>\n                        \n                    </Form>\n                </div>\n\n            )}\n        </Formik>\n    )\n}\n\n// const LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\n\n\nexport const Login = ({login, isAuth, captchaUrl}) => {\n\n    if (isAuth === true) {\n        return <Navigate to={\"/profile\"} />\n    }\n\n    return (\n        <div>\n            <h1 className={style.login}>Login</h1>\n            <LoginForm login={login} captchaUrl={captchaUrl} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    // captchaUrl: state.auth.captchaUrl,\n    // isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, {})(Login)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}